# Generated by Django 3.2.6 on 2021-09-06 07:51

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='APITracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_url', models.CharField(max_length=255)),
                ('response_status_code', models.PositiveIntegerField(null=True)),
                ('request_method', models.CharField(choices=[('Post', 'Post'), ('Get', 'Get'), ('Patch', 'Patch'), ('Delete', 'Delete')], default='Post', max_length=255)),
                ('response_data', models.TextField(null=True)),
                ('response_time', models.FloatField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_by_user_id', models.PositiveIntegerField(null=True)),
                ('model_name', models.CharField(blank=True, max_length=64, null=True)),
                ('row_id', models.PositiveIntegerField(null=True)),
                ('event_type', models.CharField(choices=[('created', 'Created'), ('updated', 'Updated'), ('soft_deleted', 'Deleted')], max_length=255)),
                ('source', models.CharField(choices=[('api', 'API'), ('dashboard', 'DASHBOARD'), ('b2c_app', 'B2C_APP'), ('op_app', 'OP_APP'), ('admin_dashboard', 'ADMIN_DASHBOARD'), ('command', 'COMMAND')], max_length=255)),
                ('end_point', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'audit_log',
            },
        ),
        migrations.CreateModel(
            name='BlacklistTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('tag_id', models.CharField(blank=True, db_index=True, max_length=255, null=True, unique=True)),
                ('tag_id2', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('np_tag_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('tag_secret_code', models.CharField(blank=True, max_length=255, null=True)),
                ('tag_category', models.PositiveIntegerField(blank=True, choices=[(0, 'Handheld'), (1, 'Windshield')], null=True)),
                ('source', models.PositiveIntegerField(choices=[(0, 'Parkwheels'), (1, 'Others'), (2, 'Parkplus'), (3, 'Non Parkplus'), (4, 'IDFC Fastag')], null=True)),
                ('tid', models.CharField(blank=True, max_length=255, null=True)),
                ('tag_type', models.PositiveIntegerField(choices=[(0, 'nfc'), (1, 'rfid')], null=True)),
                ('epc_code', models.CharField(blank=True, max_length=255, null=True)),
                ('tag_id_md5', models.CharField(blank=True, max_length=64, null=True)),
                ('tag_id2_md5', models.CharField(blank=True, max_length=64, null=True)),
                ('secret_code_md5', models.CharField(blank=True, max_length=64, null=True)),
                ('assignment_source', models.PositiveIntegerField(blank=True, choices=[(0, 'Manual Assignment'), (1, 'Monolithic'), (2, 'TagOnboarding')], null=True)),
                ('partner_enabled', models.BooleanField(default=False)),
                ('partner_name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_supertag', models.BooleanField(default=False)),
                ('bar_code', models.CharField(blank=True, max_length=255, null=True)),
                ('remark', models.CharField(blank=True, max_length=255, null=True)),
                ('blacklist_by', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'blacklist_tags',
            },
        ),
        migrations.CreateModel(
            name='BrandMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_string', models.CharField(db_index=True, max_length=255)),
                ('brand_id', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'brand_mapping',
            },
        ),
        migrations.CreateModel(
            name='CarDekhoCity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('city_id', models.PositiveIntegerField()),
                ('mid_city_id', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('available', models.BooleanField()),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('state_id', models.PositiveIntegerField(blank=True, null=True)),
                ('state_mid_id', models.PositiveIntegerField(blank=True, null=True)),
                ('store_id', models.PositiveIntegerField(blank=True, null=True)),
                ('is_hi', models.BooleanField()),
                ('remove_internal_bidding_status', models.BooleanField()),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CarDekhoVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('mid_make', models.PositiveIntegerField(blank=True, null=True)),
                ('mid_model', models.PositiveIntegerField(blank=True, null=True)),
                ('mid_variant_id', models.PositiveIntegerField(blank=True, null=True)),
                ('manufacturer_id', models.PositiveIntegerField(blank=True, null=True)),
                ('manufacturer_model_id', models.PositiveIntegerField(blank=True, null=True)),
                ('variant_id', models.PositiveIntegerField(db_index=True)),
                ('make_name', models.CharField(db_index=True, max_length=255)),
                ('model_name', models.CharField(db_index=True, max_length=255)),
                ('variant_name', models.CharField(db_index=True, max_length=255)),
                ('year', models.PositiveIntegerField(blank=True, null=True)),
                ('active', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CarMake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'car_make',
            },
        ),
        migrations.CreateModel(
            name='CarModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('body_type', models.CharField(choices=[('Convertible', 'Convertible'), ('Coupe', 'Coupe'), ('MPV', 'MPV'), ('Sedan', 'Sedan'), ('Hatchback', 'Hatchback'), ('Crossover', 'Crossover'), ('Lifeback', 'Lifeback'), ('Pickup', 'Pickup'), ('SUV', 'SUV'), ('Targa', 'Targa'), ('Wagon', 'Wagon')], max_length=255)),
                ('cw_body_type', models.CharField(help_text='Car wash body type', max_length=255, null=True)),
                ('year_start', models.IntegerField(blank=True, choices=[(1900, 1900), (1901, 1901), (1902, 1902), (1903, 1903), (1904, 1904), (1905, 1905), (1906, 1906), (1907, 1907), (1908, 1908), (1909, 1909), (1910, 1910), (1911, 1911), (1912, 1912), (1913, 1913), (1914, 1914), (1915, 1915), (1916, 1916), (1917, 1917), (1918, 1918), (1919, 1919), (1920, 1920), (1921, 1921), (1922, 1922), (1923, 1923), (1924, 1924), (1925, 1925), (1926, 1926), (1927, 1927), (1928, 1928), (1929, 1929), (1930, 1930), (1931, 1931), (1932, 1932), (1933, 1933), (1934, 1934), (1935, 1935), (1936, 1936), (1937, 1937), (1938, 1938), (1939, 1939), (1940, 1940), (1941, 1941), (1942, 1942), (1943, 1943), (1944, 1944), (1945, 1945), (1946, 1946), (1947, 1947), (1948, 1948), (1949, 1949), (1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021)], null=True)),
                ('year_end', models.IntegerField(blank=True, choices=[(1900, 1900), (1901, 1901), (1902, 1902), (1903, 1903), (1904, 1904), (1905, 1905), (1906, 1906), (1907, 1907), (1908, 1908), (1909, 1909), (1910, 1910), (1911, 1911), (1912, 1912), (1913, 1913), (1914, 1914), (1915, 1915), (1916, 1916), (1917, 1917), (1918, 1918), (1919, 1919), (1920, 1920), (1921, 1921), (1922, 1922), (1923, 1923), (1924, 1924), (1925, 1925), (1926, 1926), (1927, 1927), (1928, 1928), (1929, 1929), (1930, 1930), (1931, 1931), (1932, 1932), (1933, 1933), (1934, 1934), (1935, 1935), (1936, 1936), (1937, 1937), (1938, 1938), (1939, 1939), (1940, 1940), (1941, 1941), (1942, 1942), (1943, 1943), (1944, 1944), (1945, 1945), (1946, 1946), (1947, 1947), (1948, 1948), (1949, 1949), (1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021)], null=True)),
                ('wheel_count', models.PositiveIntegerField(null=True)),
                ('make', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='learningvehiclemodels.carmake')),
            ],
            options={
                'db_table': 'car_model',
                'unique_together': {('name', 'make', 'year_start', 'year_end')},
            },
        ),
        migrations.CreateModel(
            name='ChallanDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('pdf_url', models.CharField(blank=True, max_length=255, null=True)),
                ('under_investigation', models.BooleanField(default=False)),
                ('challan_no', models.CharField(blank=True, db_index=True, max_length=255, null=True, unique=True)),
                ('challan_datetime', models.CharField(blank=True, max_length=255, null=True)),
                ('lat_long', models.CharField(blank=True, max_length=255, null=True)),
                ('officer_id', models.PositiveIntegerField(blank=True, null=True)),
                ('accused_name', models.CharField(blank=True, max_length=255, null=True)),
                ('accused_father_name', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('challan_address', models.CharField(blank=True, max_length=255, null=True)),
                ('owner_name', models.CharField(blank=True, max_length=255, null=True)),
                ('chassis_number', models.CharField(blank=True, max_length=255, null=True)),
                ('vehicle_class', models.CharField(blank=True, max_length=255, null=True)),
                ('challan_status', models.CharField(blank=True, max_length=255, null=True)),
                ('payment_date', models.CharField(blank=True, max_length=255, null=True)),
                ('document_number', models.CharField(blank=True, max_length=255, null=True)),
                ('payment_source', models.CharField(blank=True, max_length=255, null=True)),
                ('mobile_number', models.CharField(blank=True, max_length=255, null=True)),
                ('sent_to_court_on', models.CharField(blank=True, max_length=255, null=True)),
                ('court_name', models.CharField(blank=True, max_length=255, null=True)),
                ('court_address', models.CharField(blank=True, max_length=255, null=True)),
                ('traffic_police', models.PositiveIntegerField(blank=True, null=True)),
                ('challan_source', models.PositiveIntegerField(blank=True, null=True)),
                ('for_online_payment_ch', models.PositiveIntegerField(blank=True, null=True)),
                ('amount', models.PositiveIntegerField(blank=True, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=255, null=True)),
                ('court_status', models.CharField(blank=True, max_length=255, null=True)),
                ('vehicle_impound', models.CharField(blank=True, max_length=255, null=True)),
                ('state_code', models.CharField(blank=True, max_length=255, null=True)),
                ('payment_eligible', models.PositiveIntegerField(blank=True, null=True)),
                ('vehicle_number', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('data_source', models.PositiveIntegerField(blank=True, choices=[(0, 'Parivahan'), (1, 'Delhi'), (2, 'Karnataka'), (3, 'Maharashtra'), (4, 'Gujarat'), (5, 'Hyderabad'), (6, 'THIRD_PARTY'), (7, 'TATPAR'), (8, 'RAJASTHAN')], null=True)),
                ('payment_source_of_truth', models.PositiveIntegerField(blank=True, choices=[(0, 'User'), (1, 'External'), (2, 'API')], null=True)),
                ('payment_verified', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'challan_detail',
            },
        ),
        migrations.CreateModel(
            name='ChallanOffenceDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challan_id', models.PositiveIntegerField(db_index=True)),
                ('offence_id', models.PositiveIntegerField(blank=True, null=True)),
                ('offence_name', models.TextField(blank=True, null=True)),
                ('mva', models.CharField(blank=True, max_length=255, null=True)),
                ('mva1', models.CharField(blank=True, max_length=255, null=True)),
                ('penalty', models.PositiveIntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'challan_offence_detail',
            },
        ),
        migrations.CreateModel(
            name='CustomerActivationRequestLogs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('super_tag_id', models.PositiveIntegerField(blank=True, null=True)),
                ('user_id', models.PositiveIntegerField(blank=True, null=True)),
                ('operator_id', models.PositiveIntegerField(blank=True, null=True)),
                ('vehicle_id', models.PositiveIntegerField(blank=True, null=True)),
                ('request_status', models.CharField(blank=True, choices=[('SENT', 'SENT'), ('ACCEPTED', 'ACCEPTED')], max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'customer_activation_request_logs',
            },
        ),
        migrations.CreateModel(
            name='FailedChallan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('license', models.CharField(blank=True, max_length=255, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('source_api', models.CharField(blank=True, max_length=255, null=True)),
                ('status_code', models.CharField(blank=True, max_length=255, null=True)),
                ('is_fetched_successfully', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'failed_challan',
            },
        ),
        migrations.CreateModel(
            name='FailedShipTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.IntegerField(blank=True, db_index=True, null=True)),
                ('assignment_source', models.PositiveIntegerField(blank=True, choices=[(0, 'Manual Assignment'), (1, 'Monolithic'), (2, 'dashbored')], null=True)),
                ('bar_code', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('ACTIVATED', 'ACTIVATED'), ('BLACKLIST', 'BLACKLIST'), ('NOT_FOUND', 'NOT_FOUND'), ('ALREADY_UPLOADED', 'ALREADY_UPLOADED')], max_length=25, null=True)),
                ('remark', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'failed_ship_tag',
            },
        ),
        migrations.CreateModel(
            name='FastagEPCBlacklistedTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('epc_code', models.CharField(blank=True, max_length=255, null=True)),
                ('source', models.PositiveIntegerField(choices=[(0, 'IDFC Fastag'), (1, 'IDBI Fastag')], null=True)),
                ('bar_code', models.CharField(blank=True, max_length=255, null=True)),
                ('txn_amount', models.CharField(blank=True, max_length=255, null=True)),
                ('txn_date', models.DateTimeField(blank=True, null=True)),
                ('txn_no', models.CharField(blank=True, max_length=255, null=True)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'fastag_epc_blacklist_tags',
            },
        ),
        migrations.CreateModel(
            name='InsuranceDekhoVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('make_id', models.PositiveIntegerField(blank=True, null=True)),
                ('model_id', models.PositiveIntegerField(blank=True, null=True)),
                ('version_id', models.PositiveIntegerField(blank=True, null=True)),
                ('make_name', models.CharField(blank=True, max_length=255, null=True)),
                ('model_name', models.CharField(blank=True, max_length=255, null=True)),
                ('version_name', models.CharField(blank=True, max_length=255, null=True)),
                ('seats', models.PositiveIntegerField(blank=True, null=True)),
                ('cc', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_type', models.CharField(blank=True, max_length=255, null=True)),
                ('transmission_type', models.CharField(blank=True, max_length=255, null=True)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'insurance_dekho_variant',
            },
        ),
        migrations.CreateModel(
            name='KafkaDataLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic_name', models.CharField(blank=True, max_length=255, null=True)),
                ('message', models.TextField(null=True)),
                ('future_meta_data', models.TextField(null=True)),
                ('is_done', models.BooleanField(null=True)),
                ('exception', models.TextField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'kafka_data_log',
            },
        ),
        migrations.CreateModel(
            name='MoengageNotificationLogs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reminder_date', models.DateField(blank=True, null=True)),
                ('duration_days', models.PositiveIntegerField(blank=True, null=True)),
                ('user_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('event_time', models.CharField(blank=True, max_length=255, null=True)),
                ('vehicle_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('reminder_type', models.PositiveIntegerField(blank=True, choices=[(0, 'Insurance'), (1, 'PUCC')], null=True)),
                ('source', models.CharField(blank=True, choices=[('User', 'User'), ('Signzy', 'Signzy')], max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'moengage_notification_logs',
            },
        ),
        migrations.CreateModel(
            name='NonParkplusTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('project_id', models.IntegerField(db_index=True)),
                ('parkplus_tag_id', models.CharField(max_length=100, null=True)),
                ('gate_id', models.IntegerField(null=True)),
                ('device_id', models.IntegerField(null=True)),
                ('type', models.IntegerField(null=True)),
                ('event_time', models.DateTimeField(null=True)),
                ('event_type', models.CharField(max_length=100, null=True)),
                ('non_parkplus_tag_id', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartnerAPITracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_url', models.CharField(max_length=255)),
                ('headers', models.TextField(null=True)),
                ('request_method', models.CharField(choices=[('Post', 'Post'), ('Get', 'Get'), ('Patch', 'Patch'), ('Delete', 'Delete')], default='Post', max_length=255)),
                ('request_time', models.DateTimeField(null=True)),
                ('response_time', models.DateTimeField(null=True)),
                ('response_data', models.TextField(null=True)),
                ('response_status_code', models.PositiveIntegerField(null=True)),
                ('vehicle_number', models.CharField(blank=True, max_length=255, null=True)),
                ('request_id', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'partner_api_tracking',
            },
        ),
        migrations.CreateModel(
            name='Pass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vehicle_type', models.PositiveIntegerField(choices=[(0, 'Car'), (1, 'Motorcycle'), (2, 'Cargo')], null=True)),
                ('pass_type', models.PositiveIntegerField(choices=[(0, 'Daily'), (1, 'weekly'), (2, 'Monthly'), (4, 'Yearly'), (3, 'Quaterly'), (5, 'Unlimited'), (6, 'Others')], null=True)),
                ('category', models.PositiveIntegerField(choices=[(0, 'Insider'), (1, 'Outsider')], null=True)),
                ('start', models.DateTimeField(blank=True, help_text='start date time of pass', null=True)),
                ('end', models.DateTimeField(blank=True, help_text='end date time of pass', null=True)),
                ('amount', models.IntegerField(help_text='Pass Amount', null=True)),
                ('allowed_visits', models.IntegerField(default=30)),
                ('visits_done', models.IntegerField(default=0)),
                ('duration', models.IntegerField(null=True)),
                ('valid', models.BooleanField()),
                ('parent_id', models.PositiveIntegerField(null=True)),
                ('auto_renew', models.BooleanField(null=True)),
                ('concurrency', models.PositiveIntegerField(null=True)),
                ('daily_limit', models.PositiveIntegerField(null=True)),
                ('active', models.BooleanField(default=True)),
                ('expiry_date', models.DateTimeField(null=True)),
                ('pass_template_id', models.PositiveIntegerField(blank=True, null=True)),
                ('pass_template_name', models.CharField(blank=True, max_length=255, null=True)),
                ('payment_mode', models.CharField(blank=True, choices=[('CASH', 'Cash'), ('PAYTM', 'PAYTM'), ('UPI', 'Upi')], max_length=255, null=True)),
                ('renewed_by', models.CharField(blank=True, choices=[('USER', 'User'), ('SCRIPT', 'Script')], max_length=255, null=True)),
                ('source', models.CharField(choices=[('B2C', 'B2C'), ('DASHBOARD', 'DASHBOARD'), ('MOA', 'MOA'), ('BULK_UPLOAD', 'BULK_UPLOAD')], max_length=255, null=True)),
                ('created_by_name', models.CharField(max_length=255, null=True)),
                ('created_by_user_id', models.PositiveIntegerField(blank=True, null=True)),
                ('pass_local_id', models.CharField(blank=True, max_length=255, null=True)),
                ('slot_type', models.PositiveIntegerField(choices=[(0, 'FCFS'), (1, 'RESERVED')], null=True)),
                ('created_time_in_mills', models.CharField(blank=True, max_length=255, null=True)),
                ('print_count', models.IntegerField(blank=True, null=True)),
                ('calculate_overstay', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'pass',
            },
        ),
        migrations.CreateModel(
            name='PassInfra',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pass_id', models.PositiveIntegerField(null=True)),
                ('project_id', models.PositiveIntegerField(null=True)),
                ('company_id', models.PositiveIntegerField(null=True)),
                ('category_id', models.PositiveIntegerField(default=6)),
                ('floor_id', models.PositiveIntegerField(null=True)),
                ('building_id', models.PositiveIntegerField(null=True)),
                ('unit_id', models.PositiveIntegerField(null=True)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'pass_infra',
            },
        ),
        migrations.CreateModel(
            name='PassTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('project_id', models.IntegerField()),
                ('company_id', models.IntegerField(blank=True, null=True)),
                ('category_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=200)),
                ('is_enabled', models.BooleanField(default=True)),
                ('amount', models.IntegerField(validators=[django.core.validators.MaxValueValidator(10000000)])),
                ('wheel_count', models.IntegerField()),
                ('pass_type', models.IntegerField(choices=[(1, 'daily'), (2, 'weekly'), (3, 'monthly'), (4, 'quarterly'), (5, 'unlimited'), (6, 'others')])),
                ('activation_date', models.DateField()),
                ('valid_from', models.TimeField(blank=True, null=True)),
                ('valid_till', models.TimeField(blank=True, null=True)),
                ('mobile_number_mandatory', models.BooleanField(default=False)),
                ('charges', models.IntegerField(blank=True, null=True)),
                ('status', models.BooleanField(default=True)),
                ('re_print', models.BooleanField(default=True)),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('expire_at_midnight', models.BooleanField(default=True)),
                ('calculate_overstay', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'pass_template',
            },
        ),
        migrations.CreateModel(
            name='RequestLogs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('url', models.URLField()),
                ('method', models.CharField(choices=[('POST', 'POST'), ('GET', 'GET'), ('PUT', 'PUT')], max_length=10)),
                ('partner', models.CharField(choices=[('signzy', 'signzy'), ('surepass', 'surepass')], max_length=50)),
                ('unique_key', models.CharField(max_length=255)),
                ('response_body', models.TextField(blank=True, null=True)),
                ('response_status_code', models.IntegerField(blank=True, null=True)),
                ('request_user_id', models.PositiveIntegerField(null=True)),
                ('request_source', models.CharField(max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShipTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('epc_code', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
                ('remark', models.CharField(blank=True, max_length=255, null=True)),
                ('request_id', models.IntegerField(blank=True, db_index=True, null=True)),
                ('assignment_source', models.PositiveIntegerField(blank=True, choices=[(0, 'Manual Assignment'), (1, 'Monolithic'), (2, 'dashboard')], null=True)),
                ('bar_code', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'ship_tag',
            },
        ),
        migrations.CreateModel(
            name='ShipTagRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mrf_id', models.CharField(blank=True, max_length=50, null=True)),
                ('quantity', models.PositiveIntegerField(blank=True, null=True)),
                ('added_by', models.CharField(blank=True, max_length=255, null=True)),
                ('fastag_bank', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=64, null=True)),
                ('courier_name', models.CharField(blank=True, max_length=64, null=True)),
                ('courier_status', models.CharField(blank=True, max_length=64, null=True)),
                ('courier_platform', models.CharField(blank=True, max_length=64, null=True)),
                ('upload_status', models.CharField(blank=True, choices=[('PROCESSING', 'PROCESSING'), ('UPLOADED', 'UPLOADED'), ('FAILED', 'FAILED')], default='PROCESSING', max_length=25, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'ship_tag_request',
            },
        ),
        migrations.CreateModel(
            name='SuperTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vehicle_id', models.PositiveIntegerField()),
                ('project_id', models.PositiveIntegerField(blank=True, null=True)),
                ('operator_id', models.PositiveIntegerField(blank=True, null=True)),
                ('order_id', models.PositiveIntegerField(blank=True, null=True)),
                ('tag_id', models.PositiveIntegerField(blank=True, null=True)),
                ('source', models.CharField(choices=[('toa', 'toa'), ('b2c', 'b2c'), ('dealer', 'dealer')], default='toa', max_length=10)),
                ('payment_mode', models.CharField(blank=True, choices=[('CASH', 'Cash')], max_length=255, null=True)),
                ('amount', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('INITIATED', 'INITIATED'), ('COLLECTED', 'COLLECTED')], default='INITIATED', max_length=255)),
                ('qr_code', models.CharField(blank=True, max_length=255, null=True)),
                ('third_party_customer_id', models.PositiveIntegerField(null=True)),
                ('acquirer', models.CharField(choices=[('IDFC', 'Idfc'), ('IDBI', 'Idbi')], default='IDFC', max_length=255)),
                ('tag_status', models.CharField(choices=[('Pending', 'Pending'), ('Queued', 'Queued'), ('Created', 'Created'), ('Failed', 'Failed'), ('Cancelled', 'Cancelled'), ('Invalid_Tag', 'Invalid_Tag'), ('Vehicle_Already_Registered', 'Vehicle_Already_Registered'), ('KYC_Limit_Exceeded', 'KYC_Limit_Exceeded')], default='Pending', max_length=255)),
                ('remark', models.CharField(blank=True, max_length=255, null=True)),
                ('tag_issue_date', models.DateTimeField(blank=True, null=True)),
                ('issue_tag_retry', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(blank=True, null=True)),
                ('parent_supertag_id', models.PositiveIntegerField(blank=True, null=True)),
                ('dealer_id', models.PositiveIntegerField(blank=True, null=True)),
                ('fitment_certificate_link', models.CharField(blank=True, max_length=255, null=True)),
                ('chassis', models.CharField(blank=True, max_length=255, null=True)),
                ('customer_activation_status', models.CharField(blank=True, choices=[('PENDING', 'PENDING'), ('SUCCESS', 'SUCCESS'), ('TIME_OUT', 'TIME_OUT')], max_length=255, null=True)),
            ],
            options={
                'db_table': 'super_tag_new',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('tag_id', models.CharField(blank=True, db_index=True, max_length=255, null=True, unique=True)),
                ('tag_id2', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('np_tag_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('tag_secret_code', models.CharField(blank=True, max_length=255, null=True)),
                ('tag_category', models.PositiveIntegerField(blank=True, choices=[(0, 'Handheld'), (1, 'Windshield')], null=True)),
                ('source', models.PositiveIntegerField(choices=[(0, 'Parkwheels'), (1, 'Others'), (2, 'Parkplus'), (3, 'Non Parkplus'), (4, 'IDFC Fastag'), (5, 'IDBI Fastag')], null=True)),
                ('tid', models.CharField(blank=True, max_length=255, null=True)),
                ('tag_type', models.PositiveIntegerField(choices=[(0, 'nfc'), (1, 'rfid')], null=True)),
                ('epc_code', models.CharField(blank=True, max_length=255, null=True)),
                ('tag_id_md5', models.CharField(blank=True, max_length=64, null=True)),
                ('tag_id2_md5', models.CharField(blank=True, max_length=64, null=True)),
                ('secret_code_md5', models.CharField(blank=True, max_length=64, null=True)),
                ('assignment_source', models.PositiveIntegerField(blank=True, choices=[(0, 'Manual Assignment'), (1, 'Monolithic'), (2, 'TagOnboarding')], null=True)),
                ('partner_enabled', models.BooleanField(default=False)),
                ('partner_name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_supertag', models.BooleanField(default=False)),
                ('bar_code', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='TagActivationCashback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('user_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('is_cashback_credited', models.BooleanField(default=False)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'tag_activation_cashback',
            },
        ),
        migrations.CreateModel(
            name='TagInfra',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('tag_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('tag_type', models.PositiveIntegerField(choices=[(1, 'RFID'), (0, 'NFC')], null=True)),
                ('charge_status', models.IntegerField(blank=True, choices=[(0, 'General'), (1, 'Reserved')], null=True)),
                ('wheel_count', models.PositiveIntegerField(blank=True, null=True)),
                ('category_id', models.IntegerField(blank=True, null=True)),
                ('sub_category_id', models.IntegerField(blank=True, null=True)),
                ('vehicle_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('project_id', models.PositiveIntegerField(blank=True, null=True)),
                ('building_id', models.PositiveIntegerField(blank=True, null=True)),
                ('company_id', models.PositiveIntegerField(blank=True, null=True)),
                ('floor_id', models.PositiveIntegerField(blank=True, null=True)),
                ('slot_id', models.PositiveIntegerField(blank=True, null=True)),
                ('zone_id', models.PositiveIntegerField(blank=True, null=True)),
                ('gate_id', models.PositiveIntegerField(blank=True, null=True)),
                ('unit_id', models.PositiveIntegerField(blank=True, null=True)),
                ('configuration_id', models.PositiveIntegerField(blank=True, null=True)),
                ('emp_id', models.CharField(blank=True, max_length=50, null=True)),
                ('default', models.BooleanField(default=False)),
                ('sequence', models.PositiveIntegerField(default=1)),
                ('start', models.TimeField(blank=True, help_text='lock start in case auto lock', null=True)),
                ('end', models.TimeField(blank=True, help_text='lock end in case auto lock', null=True)),
                ('tag_lock_feature', models.BooleanField(default=True, help_text='If feature enabled by user')),
                ('lock_control', models.BooleanField(default=False, help_text='If the locking is activate or not')),
                ('locked', models.BooleanField(default=False)),
                ('primary_vehicle', models.BooleanField(default=False, help_text='Will be displayed first on home screen')),
                ('allow_advance_booking', models.BooleanField(default=False, help_text='Allow advanced booking')),
                ('emergency_open', models.BooleanField(default=False)),
                ('tag_lost', models.BooleanField(default=False)),
                ('lock_type', models.PositiveIntegerField(blank=True, choices=[(0, 'Manual'), (1, 'Auto')], null=True)),
                ('tag_expiry', models.DateTimeField(blank=True, null=True)),
                ('assignment_source', models.PositiveIntegerField(blank=True, choices=[(0, 'Manual Assignment'), (1, 'Monolithic'), (2, 'Api'), (3, 'Dashboard'), (4, 'TagOnboarding')], null=True)),
                ('active', models.BooleanField(default=True)),
                ('order_id', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'tag_infra',
            },
        ),
        migrations.CreateModel(
            name='TagInfraGateMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_infra_id', models.PositiveIntegerField(db_index=True)),
                ('gate_id', models.PositiveIntegerField()),
                ('tag_id', models.CharField(max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'tag_infra_gate_mapping',
            },
        ),
        migrations.CreateModel(
            name='TagInfraLockDays',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_id', models.PositiveIntegerField(choices=[(0, 'Sunday'), (1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday')], null=True)),
                ('tag_infra_id', models.PositiveIntegerField(db_index=True, null=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'tag_infra_lock_days',
            },
        ),
        migrations.CreateModel(
            name='TagRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.IntegerField(unique=True)),
                ('user_id', models.PositiveIntegerField(blank=True, null=True)),
                ('license', models.CharField(blank=True, max_length=11, null=True)),
                ('referral_code', models.CharField(blank=True, max_length=8, null=True)),
                ('payment_mode', models.CharField(choices=[('cod', 'Cash on delivery')], default='cod', max_length=20)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('status', models.PositiveIntegerField(choices=[(0, 'Requested'), (1, 'Verified'), (2, 'Accepted'), (3, 'Out for delivery'), (4, 'Delivered'), (5, 'Declined')], null=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'tag_request',
            },
        ),
        migrations.CreateModel(
            name='TollTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('toll_request_id', models.IntegerField(blank=True, null=True)),
                ('client_transaction_id', models.CharField(blank=True, max_length=255, null=True)),
                ('tag_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('processing_date', models.DateTimeField(blank=True, null=True)),
                ('transaction_number', models.CharField(blank=True, max_length=255, null=True)),
                ('plaza_id', models.CharField(blank=True, max_length=255, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=255, null=True)),
                ('transaction_type', models.CharField(blank=True, max_length=2, null=True)),
                ('credit_amount', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True)),
                ('debit_amount', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True)),
                ('balance_amount', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True)),
                ('transaction_details', models.CharField(blank=True, max_length=255, null=True)),
                ('post_transaction_balance', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True)),
                ('transaction_processing_time', models.DateTimeField(blank=True, null=True)),
                ('recharge_amount', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True)),
                ('available_balance', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True)),
                ('original_transaction_id', models.CharField(blank=True, max_length=255, null=True)),
                ('reason_code_debit_adjustment', models.CharField(blank=True, choices=[('452', 'CREDIT CHARGEBACK ACCEPTANCE'), ('502', "CREDIT CHARGEBACK DEEMED ACCEPTANCE'"), ('474', 'PRE-ARBITRATION ACCEPTANCE'), ('480', 'ARBITRATION ACCEPTANCE'), ('700', 'MEMBER FUND COLLECTION'), ('760', 'NPCI FEE COLLECTION'), ('681', 'GOOD FAITH RAISE ACCEPTANCE'), ('673', 'PRE-COMPLIANCE ACCEPTANCE'), ('763', 'DEBIT ADJUSTMENT')], max_length=100, null=True)),
                ('lane_direction', models.CharField(blank=True, max_length=2, null=True)),
            ],
            options={
                'db_table': 'toll_transaction',
            },
        ),
        migrations.CreateModel(
            name='TollTransactionRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('request_id', models.CharField(blank=True, max_length=255, null=True)),
                ('token', models.CharField(blank=True, max_length=255, null=True)),
                ('response_code', models.CharField(blank=True, max_length=100, null=True)),
                ('response_msg', models.CharField(blank=True, max_length=255, null=True)),
                ('entity_id', models.IntegerField(blank=True, null=True)),
                ('from_date', models.DateTimeField(blank=True, null=True)),
                ('to_date', models.DateTimeField(blank=True, null=True)),
                ('transaction_count', models.IntegerField(blank=True, null=True)),
                ('response_data', models.TextField(blank=True, null=True)),
                ('xml_request', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'toll_transaction_request',
            },
        ),
        migrations.CreateModel(
            name='UserTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('tag_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('tag_code', models.CharField(blank=True, max_length=255, null=True)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'user_tag',
            },
        ),
        migrations.CreateModel(
            name='UserVehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('vehicle_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('default', models.BooleanField(default=False)),
                ('sequence', models.PositiveIntegerField(default=1)),
                ('active', models.BooleanField(default=True)),
                ('status', models.PositiveIntegerField(choices=[(0, 'Unverified'), (1, 'Verified'), (2, 'Semi Verified'), (3, 'Secondary Requested'), (4, 'Secondary Approved'), (5, 'Secondary Rejected'), (6, 'Added for some one else')], null=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'user_vehicle',
            },
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=11, null=True)),
                ('year_start', models.IntegerField(blank=True, choices=[(1900, 1900), (1901, 1901), (1902, 1902), (1903, 1903), (1904, 1904), (1905, 1905), (1906, 1906), (1907, 1907), (1908, 1908), (1909, 1909), (1910, 1910), (1911, 1911), (1912, 1912), (1913, 1913), (1914, 1914), (1915, 1915), (1916, 1916), (1917, 1917), (1918, 1918), (1919, 1919), (1920, 1920), (1921, 1921), (1922, 1922), (1923, 1923), (1924, 1924), (1925, 1925), (1926, 1926), (1927, 1927), (1928, 1928), (1929, 1929), (1930, 1930), (1931, 1931), (1932, 1932), (1933, 1933), (1934, 1934), (1935, 1935), (1936, 1936), (1937, 1937), (1938, 1938), (1939, 1939), (1940, 1940), (1941, 1941), (1942, 1942), (1943, 1943), (1944, 1944), (1945, 1945), (1946, 1946), (1947, 1947), (1948, 1948), (1949, 1949), (1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021)], null=True)),
                ('year_end', models.IntegerField(blank=True, choices=[(1900, 1900), (1901, 1901), (1902, 1902), (1903, 1903), (1904, 1904), (1905, 1905), (1906, 1906), (1907, 1907), (1908, 1908), (1909, 1909), (1910, 1910), (1911, 1911), (1912, 1912), (1913, 1913), (1914, 1914), (1915, 1915), (1916, 1916), (1917, 1917), (1918, 1918), (1919, 1919), (1920, 1920), (1921, 1921), (1922, 1922), (1923, 1923), (1924, 1924), (1925, 1925), (1926, 1926), (1927, 1927), (1928, 1928), (1929, 1929), (1930, 1930), (1931, 1931), (1932, 1932), (1933, 1933), (1934, 1934), (1935, 1935), (1936, 1936), (1937, 1937), (1938, 1938), (1939, 1939), (1940, 1940), (1941, 1941), (1942, 1942), (1943, 1943), (1944, 1944), (1945, 1945), (1946, 1946), (1947, 1947), (1948, 1948), (1949, 1949), (1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021)], null=True)),
                ('is_discontinued', models.BooleanField(default=False)),
                ('image_urls', models.TextField(blank=True, null=True)),
                ('wheel_count', models.PositiveIntegerField(null=True)),
                ('car_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learningvehiclemodels.carmodel')),
            ],
            options={
                'db_table': 'car_variant',
                'unique_together': {('name', 'car_model', 'year_start', 'year_end')},
            },
        ),
        migrations.CreateModel(
            name='VariantPropertyCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('wheel_count', models.PositiveIntegerField(null=True)),
            ],
            options={
                'db_table': 'car_variant_property_category',
            },
        ),
        migrations.CreateModel(
            name='VariantPropertyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('wheel_count', models.PositiveIntegerField(null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='learningvehiclemodels.variantpropertycategory')),
            ],
            options={
                'db_table': 'car_variant_property_type',
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('license', models.CharField(blank=True, db_index=True, max_length=20, null=True)),
                ('temp_license', models.CharField(blank=True, max_length=20, null=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('wheel_count', models.PositiveIntegerField(blank=True, choices=[(2, 'two wheeler'), (3, 'three wheeler'), (4, 'four wheeler'), (6, 'six wheeler'), (8, 'eight wheeler')], null=True)),
                ('vehicle_category', models.PositiveIntegerField(blank=True, choices=[(0, 'Private'), (1, 'Commercial'), (2, 'Public'), (3, 'Government'), (4, 'Defence')], null=True)),
                ('vehicle_type', models.PositiveIntegerField(blank=True, choices=[(0, 'Car'), (1, 'Motorcycle')], null=True)),
                ('transmission', models.PositiveIntegerField(blank=True, choices=[(0, 'Manual'), (1, 'Automatic')], null=True)),
                ('brand', models.CharField(blank=True, max_length=100, null=True)),
                ('model', models.CharField(blank=True, max_length=100, null=True)),
                ('color', models.CharField(blank=True, max_length=50, null=True)),
                ('year_of_purchase', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_type', models.PositiveIntegerField(blank=True, choices=[(0, 'Petrol'), (1, 'Diesel'), (2, 'CNG'), (3, 'Electric'), (4, 'Hybrid')], null=True)),
                ('per_day_km', models.CharField(blank=True, choices=[('0-10', '0-10 Kms'), ('10-25', '10-25 Kms'), ('25-50', '25-50 Kms'), ('50-75', '50-75 Kms'), ('75+', '75+ Kms')], max_length=20, null=True)),
                ('reg_date', models.DateTimeField(blank=True, null=True)),
                ('insurance_expiry', models.DateTimeField(blank=True, null=True)),
                ('last_service', models.DateTimeField(blank=True, null=True)),
                ('verification', models.PositiveIntegerField(blank=True, choices=[(0, 'Unverified'), (1, 'Initiated'), (2, 'In Progress'), (3, 'Verified'), (4, 'Failed')], null=True)),
                ('registered_on_app', models.BooleanField(blank=True, null=True)),
                ('user_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('default', models.BooleanField(blank=True, null=True)),
                ('sequence', models.PositiveIntegerField(blank=True, null=True)),
                ('user_vehicle_status', models.PositiveIntegerField(blank=True, choices=[(0, 'Unverified'), (1, 'Verified'), (2, 'Semi Verified'), (3, 'Secondary Requested'), (4, 'Secondary Approved'), (5, 'Secondary Rejected'), (6, 'Added for some one else'), (7, 'Secondary Pending'), (8, 'Secondary Not Requested'), (9, 'For Reminder')], null=True)),
                ('vehicle_other_phone', models.CharField(blank=True, help_text='phone number of the user for which some user added vehicle', max_length=255, null=True)),
                ('active', models.BooleanField(default=True)),
                ('source', models.CharField(blank=True, choices=[('B2C', 'B2C'), ('CHALLAN', 'CHALLAN'), ('FASTAG', 'FASTAG'), ('DIGILOCKER', 'DIGILOCKER'), ('PASS', 'PASS'), ('MG-MOTORS', 'MG-MOTORS')], max_length=255, null=True)),
                ('verified_by', models.CharField(blank=True, choices=[('USER', 'USER'), ('DIGILOCKER', 'DIGILOCKER'), ('SUPERTAG', 'SUPERTAG')], max_length=255, null=True)),
                ('vin', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'vehicle',
            },
        ),
        migrations.CreateModel(
            name='VehicleAudit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('company_id', models.PositiveIntegerField(blank=True, null=True)),
                ('vehicle_id', models.IntegerField(db_index=True, null=True)),
                ('tag_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('audit_type', models.PositiveIntegerField(choices=[(0, 'Add Vehicle'), (1, 'Edit Vehicle'), (2, 'Activate Vehicle'), (3, 'Delete Vehicle'), (4, 'Deactivate Vehicle'), (5, 'Lock Vehicle'), (6, 'Change Tag Type'), (7, 'Lost Tag'), (8, 'Change Category'), (9, 'Remove Lost Tag'), (10, 'Edit Tag'), (11, 'Activate Tag'), (13, 'Add Tag'), (12, 'Deactivate Tag'), (14, 'Unlock Vehicle'), (15, 'Corporate Tags Returned'), (16, 'Add Pass'), (17, 'Renew Pass'), (18, 'Update Pass'), (19, 'Delete Pass')], null=True)),
                ('action_id', models.PositiveIntegerField(null=True)),
                ('action_by_id', models.IntegerField(blank=True, help_text='action by userid', null=True)),
                ('status', models.PositiveIntegerField(choices=[(0, 'Pending'), (1, 'Done'), (2, 'Hardware acknowledged'), (3, 'Failed')], null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('pass_id', models.PositiveIntegerField(blank=True, null=True)),
                ('level', models.IntegerField(default=1, help_text='Level for permissions: 1-highest', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'vehicle_audit',
            },
        ),
        migrations.CreateModel(
            name='VehicleBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wheel_count', models.PositiveIntegerField(null=True)),
                ('name', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('brand_icon', models.CharField(blank=True, max_length=255, null=True)),
                ('active', models.BooleanField(default=True)),
                ('is_popular', models.BooleanField(default=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'vehicle_brands',
            },
        ),
        migrations.CreateModel(
            name='VehicleDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_id', models.PositiveIntegerField(db_index=True, null=True)),
                ('document_url', models.CharField(max_length=255, null=True)),
                ('status', models.PositiveIntegerField(choices=[(0, 'Awaited'), (1, 'Uploaded'), (2, 'Approved'), (3, 'Rejected')], null=True)),
                ('document_type', models.PositiveIntegerField(choices=[(0, 'RC'), (1, 'Pan card'), (2, 'Driving license'), (3, 'Aadhar Card'), (4, 'Voter ID'), (5, 'Vehicle'), (6, 'Passport'), (7, 'ChassisCertificate')], null=True)),
                ('remark', models.PositiveIntegerField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('doc_updated_time', models.DateTimeField(blank=True, null=True)),
                ('doc_action_time', models.DateTimeField(blank=True, null=True)),
                ('document_file_url', models.CharField(max_length=255, null=True)),
            ],
            options={
                'db_table': 'vehicle_document',
            },
        ),
        migrations.CreateModel(
            name='VehicleEPCMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('project_id', models.PositiveIntegerField(blank=True, null=True)),
                ('license', models.CharField(blank=True, max_length=255, null=True)),
                ('epc_code', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'vehicle_epc_mapping',
            },
        ),
        migrations.CreateModel(
            name='VehicleInsurances',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_id', models.PositiveIntegerField(blank=True, null=True)),
                ('user_id', models.PositiveIntegerField(blank=True, null=True)),
                ('license', models.CharField(blank=True, max_length=255, null=True)),
                ('insurance_id', models.PositiveIntegerField(blank=True, null=True)),
                ('insurance_number', models.CharField(blank=True, max_length=255, null=True)),
                ('start', models.DateTimeField(blank=True, null=True)),
                ('expiry', models.DateTimeField(blank=True, null=True)),
                ('insurance_partner', models.PositiveIntegerField(blank=True, choices=[(0, 'ACKO')], null=True)),
                ('insurance_type', models.PositiveIntegerField(blank=True, null=True)),
                ('status', models.PositiveIntegerField(blank=True, choices=[(0, 'Active'), (1, 'Expired'), (2, 'Inactive')], null=True)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'vehicle_insurances',
            },
        ),
        migrations.CreateModel(
            name='VehicleModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wheel_count', models.PositiveIntegerField(null=True)),
                ('brand_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('active', models.BooleanField(default=True)),
                ('image_url', models.CharField(blank=True, max_length=255, null=True)),
                ('body_type', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'vehicle_models',
            },
        ),
        migrations.CreateModel(
            name='VehiclePass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pass_id', models.PositiveIntegerField(null=True)),
                ('vehicle_id', models.PositiveIntegerField(null=True)),
                ('tag_id', models.CharField(max_length=255, null=True)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('fastag_status', models.PositiveIntegerField(choices=[(0, 'Linking'), (1, 'Link_Manually'), (2, 'linked')], default=0)),
                ('fastag_epc_code', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'vehicle_pass',
            },
        ),
        migrations.CreateModel(
            name='VehicleReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reminder_type_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('reminder_date', models.DateField(blank=True, null=True)),
                ('reminder_duration_type', models.PositiveIntegerField(choices=[(0, 'day'), (1, 'month'), (2, 'hour')], default=0)),
                ('is_custom_date', models.BooleanField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='VehicleReminderType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_id', models.PositiveIntegerField(blank=True, null=True)),
                ('reminder_type', models.PositiveIntegerField(blank=True, choices=[(0, 'Insurance'), (1, 'PUCC')], null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('reminder_type_name', models.CharField(blank=True, max_length=255, null=True)),
                ('reminder_url', models.CharField(blank=True, max_length=255, null=True)),
                ('reminder_upload_url', models.CharField(blank=True, max_length=255, null=True)),
                ('alert_disable', models.BooleanField(default=False)),
                ('custom_date', models.DateTimeField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('source', models.CharField(choices=[('User', 'User'), ('Signzy', 'Signzy')], default='User', max_length=255)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'vehicle_reminder_type',
            },
        ),
        migrations.CreateModel(
            name='VehicleServiceFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.PositiveIntegerField(db_index=True)),
                ('license', models.CharField(max_length=255)),
                ('service_type', models.PositiveIntegerField(blank=True, choices=[(1, 'Challan'), (2, 'SearchVehicle')], null=True)),
                ('is_service_helpful', models.BooleanField(null=True)),
                ('service_feedback', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'vehicle_service_feedback',
            },
        ),
        migrations.CreateModel(
            name='VehicleExtendedDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license', models.CharField(blank=True, db_index=True, max_length=255, null=True, unique=True)),
                ('registration_date', models.CharField(blank=True, max_length=255, null=True)),
                ('chassis', models.CharField(blank=True, max_length=255, null=True)),
                ('engine', models.CharField(blank=True, max_length=255, null=True)),
                ('owner', models.CharField(blank=True, max_length=255, null=True)),
                ('vehicle_class', models.CharField(blank=True, max_length=255, null=True)),
                ('fuel_type', models.CharField(blank=True, max_length=255, null=True)),
                ('model', models.CharField(blank=True, max_length=255, null=True)),
                ('fitness_dt', models.CharField(blank=True, max_length=255, null=True)),
                ('insurance_date', models.CharField(blank=True, max_length=255, null=True)),
                ('pollution', models.CharField(blank=True, max_length=255, null=True)),
                ('rc_status', models.CharField(blank=True, max_length=255, null=True)),
                ('chassis_last_char', models.CharField(blank=True, max_length=255, null=True)),
                ('engine_last_char', models.CharField(blank=True, max_length=255, null=True)),
                ('challan_verified', models.BooleanField(default=False)),
                ('parivahan_verified', models.BooleanField(default=True)),
                ('full_chassis', models.CharField(blank=True, max_length=255, null=True)),
                ('full_engine', models.CharField(blank=True, max_length=255, null=True)),
                ('delhi_search_challan', models.BooleanField(blank=True, help_text='checks if vehicle valid for delhi-flow', null=True)),
                ('vehicle_challan_last_update', models.DateTimeField(null=True)),
                ('owner_mobile_number', models.CharField(blank=True, max_length=255, null=True)),
                ('skip_delhi_challan', models.BooleanField(default=False, help_text='never show pop up for delhi_challan')),
                ('delhi_challan_notify', models.DateTimeField(blank=True, help_text='next pop up for delhi challan notify', null=True)),
                ('delhi_challan_last_update', models.DateTimeField(blank=True, help_text='indicates the last update time of delhi challan', null=True)),
                ('is_blacklisted', models.BooleanField(default=False)),
                ('updated_at', models.DateTimeField(null=True)),
                ('retries', models.PositiveSmallIntegerField(default=0)),
                ('signzy_status_code', models.PositiveIntegerField(blank=True, null=True)),
                ('surepass_status_code', models.PositiveIntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('owner_count', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('maker_name', models.CharField(blank=True, max_length=255, null=True)),
                ('maker_model', models.CharField(blank=True, max_length=255, null=True)),
                ('new_variant_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='learningvehiclemodels.variant')),
            ],
            options={
                'db_table': 'vehicle_extended_detail',
            },
        ),
        migrations.CreateModel(
            name='UserChallanSearchData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user_id', models.PositiveIntegerField(db_index=True)),
                ('license', models.CharField(max_length=255)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'user_challan_search_data',
                'unique_together': {('user_id', 'license')},
            },
        ),
        migrations.CreateModel(
            name='CarDekhoPricingMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1984), django.core.validators.MaxValueValidator(2021)])),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learningvehiclemodels.cardekhocity')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learningvehiclemodels.cardekhovariant')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='car_dekho_pricing', to='learningvehiclemodels.vehicle')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='CarDekhoBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user_id', models.PositiveIntegerField()),
                ('cardekho_booking_status', models.CharField(choices=[('INITIATED', 'INITIATED'), ('QUEUED', 'QUEUED'), ('SUCCESS', 'SUCCESS'), ('FAILED', 'FAILED')], default='INITIATED', max_length=255)),
                ('car_dekho_pricing_map', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='car_dekho_bookings', to='learningvehiclemodels.cardekhopricingmap')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='car_dekho_bookings', to='learningvehiclemodels.vehicle')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VariantPropertyValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(max_length=255)),
                ('value', models.TextField()),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='learningvehiclemodels.variantpropertytype')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learningvehiclemodels.variant')),
            ],
            options={
                'db_table': 'car_variant_property_value',
                'unique_together': {('type', 'variant')},
            },
        ),
    ]
